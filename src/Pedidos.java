import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.font.TextAttribute;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.util.Date;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author GONZALO
 */
public class Pedidos extends javax.swing.JFrame{
 
    private Connection conexion;
    DateFormat hourFormat;
    DateFormat dateFormat;
    Date date = new Date();
    /**
     * Creates new form Pedidos
     */
    public Pedidos() {
        initComponents();
        conectar();
        dtm= (DefaultTableModel) tablapedidos.getModel();
        dtm.setRowCount(0);
        cargartabla();
        cargarMesas();
        Font font = lblDetalles.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_GRAY);
        lblDetalles.setFont(font.deriveFont(attributes));
        listenCombos();
    }    
    
    int b = 0;
    
   private void listenCombos(){
        cmbMesas.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(b == 1){
                    if(!cmbMesas.getSelectedItem().toString().equals("Seleccionar mesa")){
                        //showMessageDialog(null, mesa);
                        tablapedidos.clearSelection();
                        PreparedStatement enunciado;
                        ResultSet resultado;
                        float total = 0;
                        try {
                            enunciado = conexion.prepareStatement("SELECT MONTO, Numero, idPedidos FROM PEDIDOS, Mesas WHERE idPedidos = Pedido_idPedido and Numero = (?)");
                            enunciado.setInt(1, Integer.parseInt(cmbMesas.getSelectedItem().toString()));
                            resultado = enunciado.executeQuery();
                            while(resultado.next()){
                                total = total + resultado.getFloat("monto");
                            }
                            txttotal.setText(total+"");
                            calculaCambio();
                            b = 0;
                        } catch (SQLException ex) {
                            Logger.getLogger(Pedidos.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }else{
                        if(tablapedidos.getSelectedRow()== -1){
                            txttotal.setText("");
                            txtcambio.setText("");
                        }
                    }
                }
            }
	});
   }
    
    
    public void cargartabla(){
        ResultSet resultado;
        PreparedStatement enunciado;
        Object []O=new Object[7];   
        dtm.setNumRows(0);
        try{
           
        enunciado = conexion.prepareStatement("select * from Pedidos,Cliente, Mesas where Fecha=? and Cliente_idCliente=cliente.idCliente and Pedido_idPedido = idPedidos");
        java.sql.Date date2 = new java.sql.Date(date.getTime());
        enunciado.setDate(1,date2);
        resultado = enunciado.executeQuery();
        while(resultado.next()){
            if(!resultado.getString("Estado").equals("CANCELADO")){
                O[0]=resultado.getInt("idPedidos");
                O[3]=resultado.getString("Estado");       
                O[2]=resultado.getString("Lugar");
                O[4]=resultado.getFloat("Monto");
                O[5]=resultado.getInt("Feria");
                O[1]=resultado.getString("NombreCliente");
                O[6] = resultado.getInt("Numero");
                dtm.addRow(O);
            }
        }
         
      }catch(Exception e){
         e.printStackTrace();
      }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    ConexionBD con = new ConexionBD();
    private void conectar(){
      conexion = con.conectar();
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablapedidos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txttotal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtrecibe = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtcambio = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btncobrar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cmbMesas = new javax.swing.JComboBox<>();
        lblDetalles = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setTitle("PEDIDOS");
        setIconImage(getIconImage());
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Pedidos ");

        tablapedidos.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        tablapedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Pedido", "Cliente", "Lugar", "Estado", "Monto", "Feria para:", "Mesa"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablapedidos.setGridColor(new java.awt.Color(204, 204, 204));
        tablapedidos.setShowGrid(false);
        tablapedidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablapedidosMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablapedidosMousePressed(evt);
            }
        });
        tablapedidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablapedidosKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tablapedidosKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tablapedidos);
        if (tablapedidos.getColumnModel().getColumnCount() > 0) {
            tablapedidos.getColumnModel().getColumn(0).setMinWidth(50);
            tablapedidos.getColumnModel().getColumn(0).setMaxWidth(60);
            tablapedidos.getColumnModel().getColumn(2).setMinWidth(80);
            tablapedidos.getColumnModel().getColumn(2).setMaxWidth(80);
            tablapedidos.getColumnModel().getColumn(3).setMinWidth(150);
            tablapedidos.getColumnModel().getColumn(3).setMaxWidth(180);
            tablapedidos.getColumnModel().getColumn(4).setMinWidth(80);
            tablapedidos.getColumnModel().getColumn(4).setMaxWidth(110);
            tablapedidos.getColumnModel().getColumn(5).setMinWidth(80);
            tablapedidos.getColumnModel().getColumn(5).setMaxWidth(110);
            tablapedidos.getColumnModel().getColumn(6).setMinWidth(70);
            tablapedidos.getColumnModel().getColumn(6).setMaxWidth(70);
        }

        jButton1.setBackground(new java.awt.Color(255, 0, 0));
        jButton1.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Cancelado");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        jButton2.setText("Pago pendiente");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton3.setText("En reparto ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 153, 0), new java.awt.Color(255, 204, 0)));

        txttotal.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txttotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttotalActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel2.setText("Total:");

        txtrecibe.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        txtrecibe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtrecibeKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel3.setText("Recibe:");

        txtcambio.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel4.setText("Cambio:");

        btncobrar.setBackground(new java.awt.Color(0, 204, 51));
        btncobrar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btncobrar.setText("Cobrar");
        btncobrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncobrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txttotal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtrecibe, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtcambio, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btncobrar, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 9, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txttotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtrecibe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtcambio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(btncobrar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel5.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel5.setText("Cobrar Mesa: #");

        cmbMesas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar mesa" }));
        cmbMesas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMesasItemStateChanged(evt);
            }
        });
        cmbMesas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbMesasMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cmbMesasMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cmbMesasMouseExited(evt);
            }
        });
        cmbMesas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMesasActionPerformed(evt);
            }
        });

        lblDetalles.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblDetalles.setForeground(new java.awt.Color(0, 0, 255));
        lblDetalles.setText("Imprimir pedido");
        lblDetalles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblDetalles.setEnabled(false);
        lblDetalles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDetallesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblDetallesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblDetallesMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbMesas, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDetalles))))
                .addGap(45, 45, 45))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblDetalles)
                        .addGap(78, 78, 78)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbMesas, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Salir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        cargartabla(); 
        //cargarMesas();
    }//GEN-LAST:event_formWindowActivated
    
    public void actualizarestadoMesa(){                
        PreparedStatement enunciado;
        int resul;
        try{
            for(int i = 0; i< IDP.length; i++){
                enunciado = conexion.prepareStatement("update Pedidos set Estado=? where idPedidos=? ");
                enunciado.setString(1,"LISTO");
                enunciado.setInt(2,IDP[i]);
                resul = enunciado.executeUpdate();
            }
        }catch(Exception e){
            e.printStackTrace();
        }//        
    }
    
    public void actualizarestado(int idpedido)
    {
        imprimirticket(idpedido);
        ResultSet resultado;
        PreparedStatement enunciado;
         int resul;
        try{
         enunciado = conexion.prepareStatement("update Pedidos set Estado=? where idPedidos=? ");
         enunciado.setString(1,"LISTO");
         enunciado.setInt(2,idpedido);
         
         resul = enunciado.executeUpdate();
         
        }catch(Exception e){
         e.printStackTrace();
        }//
        cargartabla();
    }
    public void actualizarestadocancelado(int idpedido)
    {
        ResultSet resultado;
    PreparedStatement enunciado;
         int resul;
        try{
         enunciado = conexion.prepareStatement("update  Pedidos set Estado=? where idPedidos=? ");
         enunciado.setString(1,"CANCELADO");
         enunciado.setInt(2,idpedido);
         
         resul = enunciado.executeUpdate();
         
        }catch(Exception e){
         e.printStackTrace();
        }//
        cargartabla();
    }
    public void actualizarestadoenreparto(int idpedido)
    {
        ResultSet resultado;
    PreparedStatement enunciado;
    
         int resul;
        try{
         enunciado = conexion.prepareStatement("update  Pedidos set Estado=? where idPedidos=? ");
         enunciado.setString(1,"En Reparto");
         enunciado.setInt(2,idpedido);
         
         resul = enunciado.executeUpdate();
         
        }catch(Exception e){
         e.printStackTrace();
        }//
        cargartabla();
        
    }
    public void actualizarestadocobrar(int idpedido)
    {
        ResultSet resultado;
    PreparedStatement enunciado;
         int resul;
        try{
         enunciado = conexion.prepareStatement("update  Pedidos set Estado=? where idPedidos=? ");
         enunciado.setString(1,"Pago pendiente");
         enunciado.setInt(2,idpedido);
         
         resul = enunciado.executeUpdate();
         
        }catch(Exception e){
         e.printStackTrace();
        }//
        cargartabla();
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(validarcampos()==false){return;}
        int r=tablapedidos.getSelectedRow();
        actualizarestadocancelado(Integer.parseInt(dtm.getValueAt(r,0).toString()));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(validarcampos()==false){return;}
        int r=tablapedidos.getSelectedRow();
        actualizarestadocobrar(Integer.parseInt(dtm.getValueAt(r,0).toString()));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ResultSet resultado;
        PreparedStatement enunciado;
        if(validarcampos()==false){return;}
        int r=tablapedidos.getSelectedRow();
        //showMessageDialog(this,"Renglon seleccionado:" + r);
        String respuesta="0";
        respuesta = JOptionPane.showInputDialog("Feria para:");        
        try{
            enunciado = conexion.prepareStatement("update Pedidos set Feria=? where idPedidos=? ");
            enunciado.setString(1,respuesta);
            enunciado.setInt(2,Integer.parseInt(dtm.getValueAt(r,0).toString()));         
            int resul = enunciado.executeUpdate();            
        }catch(Exception e){
            e.printStackTrace();
        }//
        cargartabla();
        actualizarestadoenreparto(Integer.parseInt(dtm.getValueAt(r,0).toString()));
        imprimirreparto(Integer.parseInt(dtm.getValueAt(r,0).toString()),r);
       
         
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txttotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txttotalActionPerformed
    
    int[] IDP = null;
    
    private void cobrarMesa(int mesa){
        ResultSet resultado, res;
        PreparedStatement enunciado,en;        
        int i = 0;
        Object []A=new Object[5];   
        String productos="";
        try{
            en = conexion.prepareStatement("select Pedido_idPedido from Mesas where Numero = "+mesa);
            res = en.executeQuery();            
            while(res.next()){
                i++;
            }            
            IDP = new int[i];
            i = 0;
            res = en.executeQuery();
            while(res.next()){
                IDP[i] = res.getInt("Pedido_idPedido");
                i++;
            }
            java.sql.Date date2 = new java.sql.Date(date.getTime());             
            for(int j = 0; j < i; j++){  
                enunciado = conexion.prepareStatement("select * from venta,productos where Pedidos_idPedidos=? and Productos_idProductos=idProducto ");
                enunciado.setInt(1,IDP[j]);
                resultado = enunciado.executeQuery();         
                while(resultado.next()){           
                    A[0]=resultado.getString("Nombre");
                    if(A[0].toString().length()>=10){
                        A[0]=A[0].toString().substring(0,10);
                    }else{
                        do{
                            A[0]=A[0]+" ";   
                        }while(A[0].toString().length()<10);
                    }
                    A[1]=resultado.getString("Descripcion");
                    if(A[1].toString().length()>=5){
                        A[1]=A[1].toString().substring(0,5);
                    }else{
                        A[1]="     ";
                    }
                    A[2]=resultado.getInt("Cantidad");
                    A[3]=resultado.getFloat("Precio");
                    A[4]=resultado.getFloat("Costo");

                    productos+=A[0].toString()+" "+A[1].toString()+" "+A[2].toString()+"x"+A[3].toString()+"  "+A[4].toString()+"\n";
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        java.util.Date fecha = new Date();
        String fechastring=fecha.getDate()+"/"+(fecha.getMonth()+1)+"/"+(fecha.getYear()+1900);
        //System.out.println("Imprime ticket local");
        Ticket t= new Ticket("ALITAS EXPRESS","Acaponeta,Nayarit",""+""+"",""+""+"","1",IDP[0]+"","",fechastring,productos,txttotal.getText(),"",txttotal.getText(),txtrecibe.getText(),txtcambio.getText(),mesa+"");
        t.print();
    }
    
    private void eliminarMesa(int mesa){
        PreparedStatement enunciado;
        int resultado;
        try {
            enunciado = conexion.prepareStatement("delete from Mesas where Numero = (?)");
            enunciado.setInt(1, mesa);
            resultado = enunciado.executeUpdate();
            if(resultado <= 0){
                showMessageDialog(this, "Error al eliminar el registro");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void eliminarPedidoMesa(int r){                
        try {
            PreparedStatement enunciado;
            int resultado;
            int idPedido = (int) tablapedidos.getValueAt(r, 0);            
            enunciado = conexion.prepareStatement("delete from Mesas where Pedido_idPedido = (?)");
            enunciado.setInt(1, idPedido);
            resultado = enunciado.executeUpdate();
            if(resultado <= 0){
                showMessageDialog(this, "Error al eliminar el registro");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }                      
    }
    
    private void btncobrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncobrarActionPerformed
        if(cmbMesas.getSelectedIndex() > 0){
            b = 0;
            int mesa = Integer.parseInt(cmbMesas.getSelectedItem().toString());
            cobrarMesa(mesa);   
            actualizarestadoMesa();
            eliminarMesa(mesa);            
        }else{
            b = 0;
            if(validarbotoncobrar()==false){return;}
            if(validarcampos()==false){return;}
            int r=tablapedidos.getSelectedRow();
            actualizarestado(Integer.parseInt(dtm.getValueAt(r,0).toString()));
            eliminarPedidoMesa(r);                     
        }
        cargarMesas();   
        limpiarcampos();
        cargartabla();
    }//GEN-LAST:event_btncobrarActionPerformed

    private void tablapedidosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablapedidosKeyPressed
        b = 1;
    }//GEN-LAST:event_tablapedidosKeyPressed

    private void tablapedidosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablapedidosKeyReleased
        int r=tablapedidos.getSelectedRow();
        txttotal.setText(dtm.getValueAt(r,4).toString());
    }//GEN-LAST:event_tablapedidosKeyReleased
       

public void abrircaja()
{
 try {
  String[] command={"cmd","/c","echo 'anything' > COM1"};
  Process p = Runtime.getRuntime().exec(command);
  p.waitFor();
  System.out.println(p.exitValue());
    }
    catch (Exception err) {
      err.printStackTrace();
    }
}
    private void tablapedidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablapedidosMouseClicked
        lblDetalles.setEnabled(true);
        b = 0;
        txtcambio.setText("");
        int r=tablapedidos.getSelectedRow();
        txttotal.setText(dtm.getValueAt(r,4).toString());
        validarreparto();
        cmbMesas.setSelectedIndex(0);
    }//GEN-LAST:event_tablapedidosMouseClicked
    public void limpiarcampos()
    {
        txttotal.setText("");
        txtrecibe.setText("");
        txtcambio.setText("");
        
    }
    public boolean validarbotoncobrar()
    {
     if(tablapedidos.getSelectedRow()==-1)
    {
        return false;
    } 
       int r=tablapedidos.getSelectedRow();
        if(dtm.getValueAt(r,3).toString().equalsIgnoreCase("LISTO"))
        {
            return false;
            
        }
       return true;
    }
    public void validarreparto()
    {
         int r=tablapedidos.getSelectedRow();

        if(dtm.getValueAt(r,3).toString().equalsIgnoreCase("En reparto"))
         {
             txtrecibe.setEnabled(false);
             
             if(Integer.parseInt(dtm.getValueAt(r,5).toString())==0)
             {
              txttotal.setText(dtm.getValueAt(r,4).toString());
             txtrecibe.setText(dtm.getValueAt(r,4).toString());   
             }
             else
             {
             txttotal.setText(dtm.getValueAt(r,5).toString());
             txtrecibe.setText(dtm.getValueAt(r,5).toString());
             }
         }
        else
        {
            txtrecibe.setEnabled(true);
            txttotal.setText(dtm.getValueAt(r,4).toString());
             txtrecibe.setText("");
        }
    }
    private void tablapedidosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablapedidosMousePressed
       int r=tablapedidos.getSelectedRow();
        txttotal.setText(dtm.getValueAt(r,4).toString());
        validarreparto();
       
    }//GEN-LAST:event_tablapedidosMousePressed

    public void imprimirreparto(int idpedido,int r){    
        ResultSet resultado;
        PreparedStatement enunciado;
        Object []A=new Object[5];   
        String productos="";
        try{
            java.sql.Date date2 = new java.sql.Date(date.getTime()); 
            //enunciado = conexion.prepareStatement("select * from venta,pedidos,Cliente,productos where Pedidos_idPedidos=pedidos.idPedidos and Productos_idProductos=Productos.idProductos and venta.Productos_idProductos=? and pedidos.Cliente_idCliente=cliente.idCliente");
            enunciado = conexion.prepareStatement("select * from venta,productos where Pedidos_idPedidos=? and Productos_idProductos=idProducto");
            enunciado.setInt(1,idpedido);
            resultado = enunciado.executeQuery();
            
            while(resultado.next()){            
                A[0]=resultado.getString("Nombre");
                if(A[0].toString().length()>=10){
                    A[0]=A[0].toString().substring(0,10);
                }else{
                    do{
                        A[0]=A[0]+" ";   
                    }while(A[0].toString().length()<10);
                }
                A[1]=resultado.getString("Descripcion");
                if(A[1].toString().length()>=5){
                    A[1]=A[1].toString().substring(0,5);
                }else{
                    A[1]="     ";
                }
                A[2]=resultado.getInt("Cantidad");
                A[3]=resultado.getFloat("Precio");
                A[4]=resultado.getFloat("Costo");
                productos+=A[0].toString()+" "+A[1].toString()+" "+A[2].toString()+"x"+A[3].toString()+"  "+A[4].toString()+"\n";
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        Object[] B;       
        java.util.Date fecha = new Date();
        String fechastring=fecha.getDate()+"/"+(fecha.getMonth()+1)+"/"+(fecha.getYear()+1900);
        //String subtotal=(Float.parseFloat(txttotal.getText())+"");
        if(dtm.getValueAt(r, 2).equals("Local")){
            B = new Object[1];
            B=(Object[]) datoscliente(idpedido,r);
            //showMessageDialog(this,B[0].toString()+"\n"+B[4].toString()+"\n"+"IdPedido = "+idpedido+"\n"+fechastring+"\n"+productos+"\n"+"Total "+txttotal.getText());
            Ticket t= new Ticket("ALITAS EXPRESS","Acaponeta,Nayarit",B[0].toString()+"\n"+B[4].toString(),"","1",idpedido+"","",fechastring,productos,txttotal.getText(),"",txttotal.getText(),txtrecibe.getText(),txtcambio.getText(),"0");
            t.print();
        }else{
            B = new Object[5];
            B=(Object[]) datoscliente(idpedido,r);
            Ticket t= new Ticket("ALITAS EXPRESS","Acaponeta,Nayarit",B[0].toString()+"\n"+B[4].toString(),B[1].toString()+"\n"+B[2].toString()+"\n"+B[3].toString(),"1",idpedido+"","",fechastring,productos,txttotal.getText(),"",txttotal.getText(),txtrecibe.getText(),txtcambio.getText(),"0");
            //showMessageDialog(this,B[0].toString()+"\n"+B[4].toString()+B[1].toString()+"\n"+B[2].toString()+"\n"+B[3].toString()+fechastring+"\n"+productos+"\n"+txttotal.getText()+"\n"+txttotal.getText()+"\n"+txtrecibe.getText()+"\n"+txtcambio.getText());
            t.print();
        }
    }
    
    private int numeroMesa(int idPedido){
        int mesa = 0;
        PreparedStatement enunciado;
        ResultSet resultado;
       try {
           enunciado = conexion.prepareStatement("select Numero from Mesas where Pedido_idPedido = "+idPedido);
           resultado = enunciado.executeQuery();
           while(resultado.next()){
               mesa = resultado.getInt("Numero");
           }
       } catch (SQLException ex) {
           Logger.getLogger(Pedidos.class.getName()).log(Level.SEVERE, null, ex);
       }
        return mesa;
    }
    
    public void imprimirticket(int idpedido)
    {
        
        ResultSet resultado;
        PreparedStatement enunciado;
        
        Object []A=new Object[5];   
        String productos="";
        try{
          java.sql.Date date2 = new java.sql.Date(date.getTime()); 
         //enunciado = conexion.prepareStatement("select * from venta,pedidos,Cliente,productos where Pedidos_idPedidos=pedidos.idPedidos and Productos_idProductos=Productos.idProductos and venta.Productos_idProductos=? and pedidos.Cliente_idCliente=cliente.idCliente");
          enunciado = conexion.prepareStatement("select * from venta,productos where Pedidos_idPedidos=? and Productos_idProductos=idProducto ");
        enunciado.setInt(1,idpedido);
         resultado = enunciado.executeQuery();
         
         while(resultado.next()){
            
             A[0]=resultado.getString("Nombre");
             if(A[0].toString().length()>=10)
             {
                 A[0]=A[0].toString().substring(0,10);
             }
             else{
             do
             {
              A[0]=A[0]+" ";   
             }while(A[0].toString().length()<10);
             }
             A[1]=resultado.getString("Descripcion");
             if(A[1].toString().length()>=5)
             {
                 A[1]=A[1].toString().substring(0,5);
             }
             else{
                 A[1]="     ";
             }
             A[2]=resultado.getInt("Cantidad");
             A[3]=resultado.getFloat("Precio");
            A[4]=resultado.getFloat("Costo");
            
            
         productos+=A[0].toString()+" "+A[1].toString()+" "+A[2].toString()+"x"+A[3].toString()+"  "+A[4].toString()+"\n";
         }
         
      }catch(Exception e){
         e.printStackTrace();
      }
        java.util.Date fecha = new Date();
        String fechastring=fecha.getDate()+"/"+(fecha.getMonth()+1)+"/"+(fecha.getYear()+1900);
        int r = tablapedidos.getSelectedRow();
        if(tablapedidos.getValueAt(r, 2).equals("Local")){
            Object []B=new Object[1];
            B=(Object[]) datoscliente(idpedido,r);
            int mesa = numeroMesa(idpedido);
            //System.out.println("Imprime ticket local");
            Ticket t= new Ticket("ALITAS EXPRESS","Acaponeta,Nayarit",B[0]+""+"",""+""+"","1",idpedido+"","",fechastring,productos,txttotal.getText(),"",txttotal.getText(),txtrecibe.getText(),txtcambio.getText(),mesa+"");
            t.print();
        }else{
        Object []B=new Object[5];
        B=(Object[]) datoscliente(idpedido,r);
        //System.out.println(B[0]+" "+B[1]+" "+B[2]+" "+B[4]);
      
      //String subtotal=(Float.parseFloat(txttotal.getText())+"");
      //int r=tablapedidos.getSelectedRow();  
      if(dtm.getValueAt(r, 2).equals("Local"))
      {
          
      }
      else
      {
          if(dtm.getValueAt(r, 3).equals("En Reparto"))
          {
              
              
          }else
          {
              Ticket t= new Ticket("ALITAS EXPRESS","Acaponeta,Nayarit",B[0].toString()+"\n"+B[4].toString(),B[1].toString()+"\n"+B[2].toString()+"\n"+B[3].toString(),"1",idpedido+"","",fechastring,productos,txttotal.getText(),"",txttotal.getText(),txtrecibe.getText(),txtcambio.getText(),"0");
              System.out.println(B[4]);  
              t.print();
          }
             
          
              
      }
      
       }
    }
    
    public Object datoscliente(int idpedido, int r)
    {
        int idcliente=0;
       
    PreparedStatement enunciado2;
        ResultSet resultado2;
        try{
           
        enunciado2 = conexion.prepareStatement("select Cliente_idCliente from pedidos where idPedidos="+idpedido);
        
         resultado2 = enunciado2.executeQuery();
         while(resultado2.next()){
            
            
             idcliente=resultado2.getInt("Cliente_idCliente");
                    
                     
         }
         
      }catch(Exception e){
         e.printStackTrace();
      }
        
       
        ResultSet resultado;
        PreparedStatement enunciado;
        Object []O = {};
        try{
            //showMessageDialog(this,"Renglon "+tablapedidos.getSelectedRow());
           if(tablapedidos.getValueAt(r, 2).equals("Local")){
               O=new Object[1];
               enunciado = conexion.prepareStatement("select NombreCliente from Cliente where idCliente = "+idcliente);
               resultado = enunciado.executeQuery();
               while(resultado.next()){
                    O[0]=resultado.getString("NombreCliente");
               }
           }else{
               O=new Object[5];
               enunciado = conexion.prepareStatement("select * from Cliente,Domicilio where Cliente.idCliente=Cliente_idCliente and Cliente.idCliente="+idcliente+"");
            resultado = enunciado.executeQuery();
            while(resultado.next()){
                O[0]=resultado.getString("NombreCliente");

                        O[1]=resultado.getString("Calle");
                        O[2]=resultado.getString("Callereferencia");
                        O[3]=resultado.getString("Descripcion");
                        O[4]=resultado.getString("Telefono");
                        //System.out.println(O[1]+"\n"+O[2]+"\n"+O[3]+"\n"+O[4]+"\n");
            }
        }
      }catch(Exception e){
         e.printStackTrace();
      }
        return O;
    }
    private void txtrecibeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtrecibeKeyReleased
        calculaCambio();
    }//GEN-LAST:event_txtrecibeKeyReleased

    private void calculaCambio(){
        if(!txtrecibe.getText().equals("")){
            float recibe=0,cambio=0,total=0;
            try{
                recibe=Float.parseFloat(txtrecibe.getText());
                total=Float.parseFloat(txttotal.getText());
            }catch(NumberFormatException nfe) {
                return;
            }
            cambio=recibe-total;
            txtcambio.setText(cambio+"");
        }
    }
    
    int tam = 0;
    
    private void cargarMesas(){
        cmbMesas.removeAllItems();
        cmbMesas.addItem("Seleccionar mesa");
        PreparedStatement enunciado;
        ResultSet resultado;
        Object O[] = new Object[1];
        
        try {
            enunciado = conexion.prepareStatement("select distinct Numero from Mesas");
            resultado = enunciado.executeQuery();
            while(resultado.next()){
                O[0] = resultado.getInt("Numero");
                if(!O[0].toString().equals("0")){
                    cmbMesas.addItem(O[0].toString());
                    tam++;
                }                
            }
        } catch (SQLException ex) {
            Logger.getLogger(Pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
        
    private void cmbMesasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMesasItemStateChanged
//        if(b == 0){
//            b++;
//        }else{
//            String mesa = cmbMesas.getSelectedItem().toString();
//            if(!mesa.equals("Seleccionar mesa")){
//                
//            }
//        }
    }//GEN-LAST:event_cmbMesasItemStateChanged

    private void cmbMesasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMesasActionPerformed
        
    }//GEN-LAST:event_cmbMesasActionPerformed
    
    private void cmbMesasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbMesasMouseClicked
        //b = 1;
    }//GEN-LAST:event_cmbMesasMouseClicked

    private void cmbMesasMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbMesasMouseEntered
        b = 1;
    }//GEN-LAST:event_cmbMesasMouseEntered

    private void cmbMesasMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbMesasMouseExited
        //b = 0;
    }//GEN-LAST:event_cmbMesasMouseExited

    private void lblDetallesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDetallesMouseEntered
        lblDetalles.setForeground(new java.awt.Color(255,51,0));
        Font font = lblDetalles.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblDetalles.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblDetallesMouseEntered

    private void lblDetallesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDetallesMouseExited
        lblDetalles.setForeground(Color.blue);
        Font font = lblDetalles.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_GRAY);
        lblDetalles.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblDetallesMouseExited

    private void lblDetallesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDetallesMouseClicked
        int idPedido=Integer.parseInt(dtm.getValueAt(tablapedidos.getSelectedRow(), 0).toString());
        imprimirticket(idPedido);
    }//GEN-LAST:event_lblDetallesMouseClicked
    public boolean validarcampos()
    {
    if(tablapedidos.getSelectedRow()==-1)
    {
        return false;
    }
    return true;
    }
    
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
        getImage(ClassLoader.getSystemResource("Recursos/icono.png"));
        return retValue;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new Pedidos().setVisible(true);
            }
        });
    }
    DefaultTableModel dtm;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btncobrar;
    private javax.swing.JComboBox<String> cmbMesas;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDetalles;
    private javax.swing.JTable tablapedidos;
    private javax.swing.JTextField txtcambio;
    private javax.swing.JTextField txtrecibe;
    private javax.swing.JTextField txttotal;
    // End of variables declaration//GEN-END:variables
}